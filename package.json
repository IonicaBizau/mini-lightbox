{
  "name": "mini-lightbox",
  "version": "3.1.0",
  "description": "Minimalist image lightbox",
  "main": "lib/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dist": "dist-it lib/index.js mini-lightbox.min.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ionicabizau/mini-lightbox.git"
  },
  "keywords": [
    "lightbox",
    "image",
    "css"
  ],
  "author": "Ionică Bizău <bizauionica@gmail.com> (https://ionicabizau.net)",
  "contributors": [
    "Dawid Fajkowski <dawid.fajkowski@gmail.com>",
    "Milan Wanielik <wanielik@gmail.com>"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ionicabizau/mini-lightbox/issues"
  },
  "homepage": "https://github.com/ionicabizau/mini-lightbox",
  "blah": {
    "description": [
      "## Demo",
      "Check out [the demo page](http://ionicabizau.github.io/mini-lightbox).",
      "",
      "## Browser support",
      "As long the [CSS3 transitions](http://caniuse.com/#feat=css-transitions) are supported by your browser, this should work fine. :rocket:",
      "## Examples",
      "",
      "### Simple usage",
      "",
      "```html",
      "<img id=\"myImage\" src=\"myImage.png\" alt=\"Some title\">",
      "<script>",
      "    new MiniLightbox(\"#myImage\");",
      "</script>",
      "```",
      "",
      "### Advanced usage",
      "If you need more stuff (e.g. animations etc), you need to create custom handlers (`customClose` and `customOpen` handlers). Works like a charm with animate.css library. :smile:",
      "",
      "```js",
      "function waitForAnimationEnd(element, callback) {",
      "    var animationEnd = \"animationend\";",
      "    var handleAnimationEnd = function(event) {",
      "      // remove listner",
      "      event.target.removeEventListener(animationEnd, handleAnimationEnd);",
      "      // fire callback",
      "      return callback(event);",
      "    };",
      "    element.addEventListener(animationEnd, handleAnimationEnd);",
      "}",
      "",
      "MiniLightbox.customClose = function(self) {",
      "    self.img.classList.add(\"animated\", \"fadeOutDown\");",
      "    waitForAnimationEnd(self.img, function() {",
      "      self.box.classList.add(\"animated\", \"fadeOut\");",
      "    });",
      "    waitForAnimationEnd(self.box, function() {",
      "      self.box.classList.remove(\"animated\", \"fadeOut\", \"fadeIn\");",
      "      self.img.classList.remove(\"animated\", \"fadeOutDown\");",
      "      self.box.style.display = \"none\";",
      "    });",
      "    return false;",
      "};",
      "",
      "MiniLightbox.customOpen = function(self) {",
      "    if (self.el.parentElement.tagName === \"A\") {",
      "      return false;",
      "    }",
      "    self.box.classList.add(\"animated\", \"fadeIn\");",
      "    self.img.classList.add(\"animated\", \"fadeInUp\");",
      "};",
      "```",
      "",
      "### Using `data-image-opened` attribute",
      "If `data-image-opened` attribute is provided in `img` element, it will be used for the path of the image when the popup is opened.",
      "",
      "```html",
      "<img id=\"myImage\" data-image-opened=\"./big.png\" src=\"small.png\" alt=\"Some title\">",
      "```",
      "",
      "### Delegation",
      "If images are added dynamically, you need to use delegation:",
      "",
      "```js",
      "new MiniLightbox({",
      "    selector: \".content img\"",
      "    // the common container where the images are appended",
      "  , delegation: \"html\"",
      "});",
      "```"
    ]
  },
  "files": [
    "example",
    "bin/",
    "app/",
    "lib/",
    "dist/",
    "src/",
    "scripts/",
    "resources/",
    "menu/",
    "cli.js",
    "index.js",
    "index.d.ts",
    "package-lock.json",
    "bloggify.js",
    "bloggify.json",
    "bloggify/"
  ],
  "dependencies": {
    "elly": "^1.1.2",
    "idy": "^1.2.5",
    "iterate-object": "^1.3.2"
  }
}